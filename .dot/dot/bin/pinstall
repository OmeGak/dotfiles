#!/usr/bin/env bash
# Pretty and quite silent package installer wrapper

progname=$(basename $0)
[[ -z "$DOT_TOPIC_LOGFILE_SUFFIX" ]] && DOT_TOPIC_LOGFILE_SUFFIX="dot.log"


# -- Core ----------------------------------------------------------------------

_pretty_install() {
  local package=$1
  local manager=$2
  local cmd_install=$3
  local cmd_check=$4
  local args=${*:5}
  if [[ ! $(which "${manager}") ]]; then
    "Error: ${manager} is not available" 1>&2
    exit 1
  fi
  if [[ $(_is_installed "${cmd_check}" "${package}") == false ]]; then
    pprint info-go "Installing ${package} from ${manager}"
    ${cmd_install} ${package} ${args} > /tmp/${package}.with-${manager}.$DOT_TOPIC_LOGFILE_SUFFIX 2>&1
    [[ $? != 0 ]] && pprint info-error "Failed to install ${package}" && exit 1
  fi
}

_is_installed() {
  local cmd_check=$1
  local package=$2
  local output
  local code
  output=$(${cmd_check} ${package} 2> /dev/null)
  code=$?
  [[ -z "${output}" ]] || [[ "${code}" != 0 ]] && echo false && return
  echo true
}


# -- System calls --------------------------------------------------------------

papt() {
  _pretty_install $1 "apt-get" "sudo apt-get install -q -y" "dpkg -s" "${@:2}"
}

pbrew() {
  _pretty_install $1 "brew" "brew install" "brew ls --versions" "${@:2}"
}

pcask() {
  _pretty_install $1 "brew" "brew cask install" "brew cask ls --versions" "${@:2}"
}

pgem() {
  _pretty_install $1 "gem" "gem install" "gem list -i" "${@:2}"
}

pnpm() {
  _pretty_install $1 "npm" "npm -g install" "npm -g list" "${@:2}"
}

ppip() {
  _pretty_install $1 "pip3" "pip3 install --upgrade" "pip3 show" "${@:2}"
}


# ------------------------------------------------------------------------------

usage() {
  echo "usage: ${progname} system package args"
  echo "  system:  package system to use: (apt | brew | gem | npm | pip)"
  echo "  package: the package to be installed"
  echo "  args:    additional args to pass to the pkg manager"
}

case "$1" in
  apt)
    fn="papt";;
  brew)
    fn="pbrew";;
  cask)
    fn="pcask";;
  gem)
    fn="pgem";;
  npm)
    fn="pnpm";;
  pip)
    fn="ppip";;
  *)
    usage
    exit 1;;
esac

if [[ $# -lt 2 ]]; then
  usage
  exit 1
fi

${fn} "$2" "${@:3}"
exit 0
